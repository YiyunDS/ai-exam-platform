// Core application types for the AI Exam Customization Platform

export interface Teacher {
  id: string;
  email: string;
  name: string;
  institution?: string;
  preferences?: Record<string, any>;
  createdAt: string;
  updatedAt: string;
}

export interface Student {
  id: string;
  teacherId: string;
  name: string;
  email?: string;
  major: string;
  academicLevel: 'Freshman' | 'Sophomore' | 'Junior' | 'Senior';
  gpa?: number;
  careerInterests: string[];
  additionalInfo?: Record<string, any>;
  active: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface Cluster {
  id: string;
  teacherId: string;
  name: string;
  description?: string;
  characteristics: {
    averageGPA: number;
    commonInterests: string[];
    learningStyle: string;
    majorDistribution: Record<string, number>;
    dominantMajor?: string;
    dominantLevel?: string;
  };
  clusteringCriteria?: Record<string, any>;
  studentCount: number;
  isAutoGenerated: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface Question {
  id: string;
  teacherId: string;
  title: string;
  baselineQuestion: string;
  difficultyLevel: 'Easy' | 'Medium' | 'Hard';
  subject: string;
  learningObjectives: string[];
  questionType: 'Multiple Choice' | 'Short Answer' | 'Essay' | 'Problem Solving';
  metadata?: Record<string, any>;
  tags: string[];
  isTemplate: boolean;
  usageCount: number;
  createdAt: string;
  updatedAt: string;
}

export interface CustomizedQuestion {
  id: string;
  questionId: string;
  clusterId: string;
  customizedText: string;
  context: string;
  aiModel: string;
  generationPrompt?: string;
  tokensUsed?: number;
  generationTime?: number;
  reviewed: boolean;
  approved: boolean;
  feedback?: string;
  version: number;
  createdAt: string;
  updatedAt: string;
}

export interface Exam {
  id: string;
  teacherId: string;
  title: string;
  description?: string;
  instructions?: string;
  timeLimit?: number;
  questionOrder: string[];
  settings?: Record<string, any>;
  status: 'draft' | 'published' | 'archived';
  publishedAt?: string;
  archivedAt?: string;
  createdAt: string;
  updatedAt: string;
}

export interface ExamQuestion {
  examId: string;
  questionId: string;
  orderIndex: number;
  points: number;
  settings?: Record<string, any>;
}

export interface AIUsageLog {
  id: string;
  teacherId: string;
  operationType: string;
  model: string;
  tokensUsed: number;
  costUsd?: number;
  processingTime?: number;
  requestData?: Record<string, any>;
  responseData?: Record<string, any>;
  success: boolean;
  errorMessage?: string;
  createdAt: string;
}

export interface ActivityLog {
  id: string;
  teacherId: string;
  action: string;
  resourceType: string;
  resourceId?: string;
  details?: Record<string, any>;
  ipAddress?: string;
  userAgent?: string;
  createdAt: string;
}

// Request/Response types for API

export interface CreateStudentRequest {
  name: string;
  email?: string;
  major: string;
  academicLevel: Student['academicLevel'];
  gpa?: number;
  careerInterests?: string[];
  additionalInfo?: Record<string, any>;
}

export interface UpdateStudentRequest extends Partial<CreateStudentRequest> {
  active?: boolean;
}

export interface StudentImportRequest {
  file: File;
  mapping: Record<string, string>;
}

export interface StudentImportResponse {
  imported: number;
  skipped: number;
  errors: Array<{
    row: number;
    error: string;
  }>;
}

export interface CreateQuestionRequest {
  title: string;
  baselineQuestion: string;
  difficultyLevel: Question['difficultyLevel'];
  subject: string;
  learningObjectives?: string[];
  questionType: Question['questionType'];
  metadata?: Record<string, any>;
  tags?: string[];
}

export interface CustomizeQuestionRequest {
  clusterIds: string[];
  customizationLevel: 'high' | 'medium' | 'low';
  preserveStructure?: boolean;
  includeContext?: boolean;
}

export interface CustomizeQuestionResponse {
  customizedQuestions: Array<{
    clusterId: string;
    customizedText: string;
    context: string;
    approved: boolean;
  }>;
  processingTime: number;
  tokensUsed: number;
}

export interface AICustomizationRequest {
  baselineQuestion: string;
  clusterProfile: {
    major: string;
    academicLevel: string;
    careerInterests: string[];
    averageGPA: number;
    learningStyle?: string;
  };
  constraints: {
    maintainDifficulty: boolean;
    includeRealWorldContext: boolean;
    preserveLearningObjectives: boolean;
  };
}

export interface CreateExamRequest {
  title: string;
  description?: string;
  instructions?: string;
  timeLimit?: number;
  questionIds: string[];
  settings?: Record<string, any>;
}

export interface PaginationParams {
  page?: number;
  limit?: number;
}

export interface PaginationResponse<T> {
  data: T[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
  };
}

export interface FilterParams {
  search?: string;
  major?: string;
  academicLevel?: Student['academicLevel'];
  clusterId?: string;
  subject?: string;
  difficultyLevel?: Question['difficultyLevel'];
  questionType?: Question['questionType'];
  status?: Exam['status'];
}

// API Response types
export interface APIResponse<T = any> {
  data?: T;
  error?: {
    code: string;
    message: string;
    details?: any;
  };
}

export interface DashboardAnalytics {
  totalStudents: number;
  totalClusters: number;
  totalQuestions: number;
  totalExams: number;
  aiUsage: {
    questionsGenerated: number;
    tokensUsed: number;
    estimatedCost: number;
  };
  recentActivity: Array<{
    type: string;
    description: string;
    timestamp: string;
  }>;
}

// Form validation schemas (for Zod)
export interface FormField {
  name: string;
  type: 'text' | 'email' | 'number' | 'select' | 'multiselect' | 'textarea' | 'file';
  label: string;
  placeholder?: string;
  required?: boolean;
  options?: Array<{ value: string; label: string }>;
  validation?: any;
}

// UI Component props
export interface TableColumn<T> {
  key: keyof T;
  header: string;
  sortable?: boolean;
  render?: (value: any, row: T) => React.ReactNode;
}

export interface SelectOption {
  value: string;
  label: string;
  disabled?: boolean;
}

// State management types
export interface AuthState {
  user: Teacher | null;
  loading: boolean;
  signIn: (email: string, password: string) => Promise<void>;
  signUp: (email: string, password: string, name: string) => Promise<void>;
  signOut: () => Promise<void>;
}

export interface StudentsState {
  students: Student[];
  loading: boolean;
  filters: FilterParams;
  pagination: PaginationResponse<Student>['pagination'];
  fetchStudents: () => Promise<void>;
  createStudent: (data: CreateStudentRequest) => Promise<void>;
  updateStudent: (id: string, data: UpdateStudentRequest) => Promise<void>;
  deleteStudent: (id: string) => Promise<void>;
  importStudents: (data: StudentImportRequest) => Promise<StudentImportResponse>;
  setFilters: (filters: FilterParams) => void;
}

export interface ClustersState {
  clusters: Cluster[];
  loading: boolean;
  fetchClusters: () => Promise<void>;
  generateClusters: (criteria?: any) => Promise<void>;
  updateCluster: (id: string, data: Partial<Cluster>) => Promise<void>;
  deleteCluster: (id: string) => Promise<void>;
}

export interface QuestionsState {
  questions: Question[];
  customizedQuestions: Record<string, CustomizedQuestion[]>;
  loading: boolean;
  fetchQuestions: () => Promise<void>;
  createQuestion: (data: CreateQuestionRequest) => Promise<void>;
  updateQuestion: (id: string, data: Partial<Question>) => Promise<void>;
  deleteQuestion: (id: string) => Promise<void>;
  customizeQuestion: (id: string, data: CustomizeQuestionRequest) => Promise<CustomizeQuestionResponse>;
  approveCustomization: (id: string) => Promise<void>;
}

export interface UIState {
  sidebarOpen: boolean;
  theme: 'light' | 'dark';
  notifications: Notification[];
  modals: Record<string, boolean>;
  setSidebarOpen: (open: boolean) => void;
  setTheme: (theme: 'light' | 'dark') => void;
  addNotification: (notification: Omit<Notification, 'id'>) => void;
  removeNotification: (id: string) => void;
  openModal: (modalId: string) => void;
  closeModal: (modalId: string) => void;
}

export interface Notification {
  id: string;
  type: 'success' | 'error' | 'warning' | 'info';
  title: string;
  message?: string;
  duration?: number;
}

// Database table names (for type safety)
export const TABLE_NAMES = {
  TEACHERS: 'teachers',
  STUDENTS: 'students',
  CLUSTERS: 'clusters',
  STUDENT_CLUSTERS: 'student_clusters',
  QUESTIONS: 'questions',
  CUSTOMIZED_QUESTIONS: 'customized_questions',
  EXAMS: 'exams',
  EXAM_QUESTIONS: 'exam_questions',
  AI_USAGE_LOGS: 'ai_usage_logs',
  ACTIVITY_LOGS: 'activity_logs',
} as const;

export type TableName = typeof TABLE_NAMES[keyof typeof TABLE_NAMES];